#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <BLEBeacon.h>

#define DEVICE_NAME_1            "ESP32_1"
#define SERVICE_UUID_1           "7A0247E7-8E88-409B-A959-AB5092DDB03E"
#define BEACON_UUID_1            "2D7A9F0C-E0E8-4CC9-A71B-A21DB2D034A1"
#define BEACON_UUID_REV_1        "A134D0B2-1DA2-1BA7-C94C-E8E00C9F7A2D"
#define CHARACTERISTIC_UUID_1    "82258BAA-DF72-47E8-99BC-B73D7ECD08A5"
#define MAJOR_1                  1001
#define MINOR_1                  2001

#define DEVICE_NAME_2            "ESP32_2"
#define SERVICE_UUID_2           "A1B2C3D4-E5F6-1234-5678-ABCDEFABCDEF"
#define BEACON_UUID_2            "A1B2C3D4-E5F6-1234-5678-ABCDEFABCDEF"
#define BEACON_UUID_REV_2        "FEDCBA9876543210-FEDC-BA98-7654-3210FEDCBA98"
#define CHARACTERISTIC_UUID_2    "A1B2C3D4-E5F6-1234-5678-ABCDEFABCDEF"
#define MAJOR_2                  1002
#define MINOR_2                  2002

BLEServer *pServer_1;
BLECharacteristic *pCharacteristic_1;
bool deviceConnected_1 = false;

BLEServer *pServer_2;
BLECharacteristic *pCharacteristic_2;
bool deviceConnected_2 = false;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      if (pServer == pServer_1) {
        deviceConnected_1 = true;
        Serial.println("deviceConnected_1 = true");
      }
      else if (pServer == pServer_2) {
        deviceConnected_2 = true;
        Serial.println("deviceConnected_2 = true");
      }
    }
    void onDisconnect(BLEServer* pServer) {
      if (pServer == pServer_1) {
        deviceConnected_1 = false;
        Serial.println("deviceConnected_1 = false");
      }
      else if (pServer == pServer_2) {
        deviceConnected_2 = false;
        Serial.println("deviceConnected_2 = false");
      }

      // Reiniciar la publicidad para que vuelva a ser visible y conectable
      pServer->getAdvertising()->start();
      Serial.println("iBeacon advertising restarted");
    }
};


class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string rxValue = pCharacteristic->getValue();

      if (rxValue.length() > 0) {
        Serial.println("*********");
        Serial.print("Received Value: ");
        for (int i = 0; i < rxValue.length(); i++) {
          Serial.print(rxValue[i]);
        }
        Serial.println();
        Serial.println("*********");

      }
    }
};


void init_service() {
  BLEAdvertising* pAdvertising;
  pAdvertising = pServer_1->getAdvertising();
  pAdvertising->stop();

  // Create the BLE Service
  BLEService *pService = pServer_1->createService(BLEUUID(SERVICE_UUID_1));

  // Create a BLE Characteristic
  pCharacteristic_1 = pService->createCharacteristic(
                      CHARACTERISTIC_UUID_1,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic_1->setCallbacks(new MyCallbacks());
  pCharacteristic_1->addDescriptor(new BLE2902());

  pAdvertising->addServiceUUID(BLEUUID(SERVICE_UUID_1));

  // Start the service
  pService->start();

  pAdvertising->start();
}

void init_beacon() {
  BLEAdvertising* pAdvertising;
  pAdvertising = pServer_1->getAdvertising();
  pAdvertising->stop();
  // iBeacon
  BLEBeacon myBeacon;
  myBeacon.setManufacturerId(0x4c00);
  //myBeacon.setMajor(5);
  //myBeacon.setMinor(88);
  myBeacon.setSignalPower(0xc5);
  myBeacon.setProximityUUID(BLEUUID(BEACON_UUID_REV_1));

  BLEAdvertisementData advertisementData;
  advertisementData.setFlags(0x1A);
  advertisementData.setManufacturerData(myBeacon.getData());
  pAdvertising->setAdvertisementData(advertisementData);

  pAdvertising->start();
}

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("Initializing...");
  Serial.flush();

  BLEDevice::init(DEVICE_NAME_1);
  pServer_1 = BLEDevice::createServer();
  pServer_1->setCallbacks(new MyServerCallbacks());

  Serial.println("pas2 init device1");

  BLEDevice::init(DEVICE_NAME_2);
  pServer_2 = BLEDevice::createServer();
  pServer_2->setCallbacks(new MyServerCallbacks());

  Serial.println("pas2 init device2");

  init_service();
  Serial.println("service1 started");
  init_beacon();
  Serial.println("iBeacon1 funciona");

  Serial.println("iBeacon + service defined and advertising!");
}

void loop() {
  if (deviceConnected_1) {
    //Serial.printf("*** NOTIFY: %d ***\n", value);
    pCharacteristic_1->setValue("dispositiu1");
    //pCharacteristic->notify();
    //value++;
  }
  if (deviceConnected_2) {
    //Serial.printf("*** NOTIFY: %d ***\n", value);
    pCharacteristic_2->setValue("dispositiu2");
    //pCharacteristic->notify();
    //value++;
  }
  delay(2000);
}
